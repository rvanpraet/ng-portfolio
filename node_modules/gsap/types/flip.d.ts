declare namespace gsap {

  type ChangeFunc = (animate: Function) => any;
  type EnterOrLeaveCallback = (elements: Element[], makeAbsolute: Function) => any;

  interface FlipVars {
    targets?: Element | string | null | ArrayLike<Element | string>;
    change: ChangeFunc;
    scale?: boolean;
    onEnter?: EnterOrLeaveCallback;
    onLeave?: EnterOrLeaveCallback;
    wait?: boolean;
    absolute?: boolean;
    props?: string;
    swap?: "fade" | boolean;
    context?: Element | string;
    onInit?: Function;

    callbackScope?: object;
    onComplete?: Callback;
    onCompleteParams?: any[];
    onRepeat?: Callback;
    onRepeatParams?: any[];
    onReverseComplete?: Callback;
    onReverseCompleteParams?: any[];
    onStart?: Callback;
    onStartParams?: any[];
    onUpdate?: Callback;
    onUpdateParams?: any[];
    delay?: TweenValue;
    duration?: TweenValue;
    ease?: string | EaseFunction;
    immediateRender?: boolean;
    overwrite?: "auto" | boolean;
    stagger?: NumberValue | StaggerVars;
    inherit?: boolean;
  }

  interface FlipStatic {
    register(core: typeof gsap): void;
  }

  interface Flip extends FlipStatic {

  }

  /**
   * Smoothly transitions elements to the new positions/sizes set in the change() function.
   *
   * @param {FlipVars} vars
   * @returns {Timeline} Timeline instance
   * @memberof gsap
   */
  function flip(vars: FlipVars): core.Timeline;
}

declare const Flip: gsap.Flip;

declare module "gsap/Flip" {
  export const Flip: gsap.Flip;
  export { Flip as default };
}

declare module "gsap/dist/Flip" {
  export * from "gsap/Flip";
  export { Flip as default } from "gsap/Flip";
}

declare module "gsap/src/Flip" {
  export * from "gsap/Flip";
  export { Flip as default } from "gsap/Flip";
}

declare module "gsap/all" {
  export * from "gsap/Flip";
}